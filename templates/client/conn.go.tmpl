package {{.PackageName}}

import (
	"errors"
	"os"
	"os/signal"
	"strconv"
	"syscall"


	"github.com/ml444/gkit/transport/grpcx"
	"github.com/ml444/gkit/log"
	"google.golang.org/grpc"
)

const EnvKeyAutoInjectConn = "AUTO_INJECT_CLIENT_CONN"
const EnvKey{{ToUpperFirst .PackageName}}DSN = "SERVICE_{{ToUpper .PackageName}}_DSN"


func init() {
	var err error

	dsn := os.Getenv(EnvKey{{ToUpperFirst .PackageName}}DSN)
	if dsn == "" {
		dsn = "{{.PackageName}}.default.svc.cluster.local:5040"
		//dsn = "xds:///uuid.default.svc.cluster.local:5040"
	}

	var isAutoInject bool
	autoInjectStr := os.Getenv(EnvKeyAutoInjectConn)
	if autoInjectStr != "" {
		isAutoInject, err = strconv.ParseBool(autoInjectStr)
		if err != nil {
			log.Errorf("err: %v", err)
			return
		}
	}
	if isAutoInject {
		log.Infof("auto inject %s client conn", ClientName)
		conn, err := grpcx.NewXDSConn(dsn)
		if err != nil {
			log.Fatal(err.Error())
			return
		}
		InjectConn(conn)
        go func() {
            signalCh := make(chan os.Signal, 1)
            signal.Notify(signalCh, syscall.SIGINT, syscall.SIGTERM)

            <-signalCh
			log.Warnf("exit: close %s client connect", ClientName)
            if err = conn.Close(); err != nil {
                log.Error(err.Error())
            }
        }()
	}
}

{{$svc := index .ServiceList 0}}
{{$sn := ToCamelCase $svc.ServiceName}}
type CliManager struct {
	conn    *grpc.ClientConn
    cli     {{$sn}}Client
	initErr error
}

func InjectConn(conn *grpc.ClientConn) {
	if conn == nil {
		return
	}
	cliMgr.conn = conn
    cliMgr.cli = New{{$sn}}Client(conn)
}

func CloseConn() error {
    return cliMgr.conn.Close()
}

var cliMgr = CliManager{
	initErr: errors.New(
		"not yet initialized grpc client, " +
		"please call 'NewXDSConn()' and 'InjectConn()' on server, " +
		"and conn.Close() when the server exits"),
}



