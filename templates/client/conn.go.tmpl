package {{.PackageName}}

import (
	"os"
	"os/signal"
	"syscall"

	"github.com/ml444/gkit/log"
	"github.com/ml444/gkit/transport/grpcx"
	"google.golang.org/grpc"
	"google.golang.org/grpc/connectivity"
)

const EnvKey{{ToUpperFirst .PackageName}}DSN = "SERVICE_{{ToUpper .PackageName}}_DSN"

var (
	isLocal bool
	dsn     = ""
	cliMgr  = CliManager{}
)

func init() {
	go func() {
		signalCh := make(chan os.Signal, 1)
		signal.Notify(signalCh, syscall.SIGINT, syscall.SIGTERM)

		<-signalCh
		log.Warnf("exit: close %s client connect", ClientName)
		if cliMgr.conn == nil {
			return
		}
		if err := cliMgr.conn.Close(); err != nil {
			log.Error(err.Error())
		}
	}()
}
{{$svc := index .ServiceList 0}}
{{$sn := ToCamelCase $svc.ServiceName}}
type CliManager struct {
	conn    *grpc.ClientConn
{{- range $i, $svc := .ServiceList }}
    {{$svc.ServiceName}}Cli     {{ToCamelCase $svc.ServiceName}}Client
{{ end -}}
}

func (m *CliManager) getServerDSN() string {
	if dsn == "" {
		dsn = os.Getenv(EnvKey{{ToUpperFirst .PackageName}}DSN)
		if dsn == "" {
			if isLocal {
				dsn = "localhost:{{index .Ports 2}}"
			} else {
				dsn = "{{.PackageName}}.{{.Group}}.svc.cluster.local:5040"
			}
		}
	}
	return dsn
}

func (m *CliManager) initConn() error {
	if m.conn != nil && m.conn.GetState() <= connectivity.Ready {
		return nil
	}
	conn, err := grpcx.NewXDSConn(m.getServerDSN())
	if err != nil {
		log.Fatal(err.Error())
		return err
	}
	m.conn = conn
	return nil
}

func (m *CliManager) InjectConn() error {
	err := m.initConn()
	if err == nil {
		return err
	}
{{- range $i, $svc := .ServiceList }}
    m.{{$svc.ServiceName}}Cli = New{{ToCamelCase $svc.ServiceName}}Client(m.conn)
{{ end -}}
	return nil
}

func CheckConn() error {
	if cliMgr.conn == nil {
		err := cliMgr.InjectConn()
		if err != nil {
			return err
		}
	}
	return nil
}

func CloseConn() error {
	return cliMgr.conn.Close()
}

func EnableLocalDebug() {
	isLocal = true
}



