package {{.PackageName}}server

import (
"context"
	"github.com/ml444/gkit/dbx"
	"github.com/ml444/gkit/listoption"
	log "github.com/ml444/glog"
	"gorm.io/gorm"

	"{{.ClientImport}}"
	"{{.ModulePath}}/internal/db"
)

{{$pn := .PackageName}}
{{ $listOptionMap := .ListOptionMap }}
func init() {
	db.RegisterModel(
{{- range $i, $m := .ModelList -}}
		&{{$pn}}.{{$m.Name}}{},
{{- end -}}
	)
}

{{ range $i, $m := .ModelList }}
    {{$TModelName := TrimPrefix $m.Name "Model" }}
    {{$cliModelName := Concat $pn "." $m.Name}}
var db{{$TModelName}} = NewT{{$TModelName}}(db.DB())

type T{{$TModelName}} struct {
	db    *gorm.DB
	model *{{$cliModelName}}
}

func NewT{{$TModelName}}(db *gorm.DB) *T{{$TModelName}} {
	return &T{{$TModelName}}{
		db:    db,
		model: &{{$cliModelName}}{},
	}
}

func (d *T{{$TModelName}}) newScope() *dbx.Scope {
    if d.db == nil {
		d.db = db.DB()
	}
	return dbx.NewScope(d.db, &{{$cliModelName}}{})
}

func (d *T{{$TModelName}}) Create(ctx context.Context, m *{{$cliModelName}}) error {
	return d.newScope().Create(&m)
}

func (d *T{{$TModelName}}) Update(ctx context.Context, m interface{}, whereMap map[string]interface{}) error {
	return d.newScope().Where(whereMap).Update(&m)
}

func (d *T{{$TModelName}}) DeleteById(ctx context.Context, pk uint64) error {
	return d.newScope().Eq(dbId, pk).Delete()
}

func (d *T{{$TModelName}}) DeleteByWhere(ctx context.Context, whereMap map[string]interface{}) error {
	return d.newScope().Where(whereMap).Delete()
}

func (d *T{{$TModelName}}) GetOne(ctx context.Context, pk uint64) (*{{$cliModelName}}, error) {
	var m {{$cliModelName}}
	err := d.newScope().SetNotFoundErr({{$pn}}.ErrNotFound{{$TModelName}}).First(&m, pk)
	return &m, err
}
{{$sModelName := ToLowerFirst $TModelName}}
{{$reqType := Concat "List" $TModelName "Req"}}
func (d *T{{$TModelName}}) ListWithPaginate(ctx context.Context, listOption *listoption.Paginate, whereOpts interface{}) ([]*{{$cliModelName}}, *listoption.Paginate, error) {
	var err error
	scope := d.newScope().Where(whereOpts)
	
    var {{$sModelName}}List []*{{$cliModelName}}
	var paginate *listoption.Paginate
	paginate, err = scope.PaginateQuery(listOption, &{{$sModelName}}List )
	if err != nil {
		log.Errorf("err: %v", err)
		return nil, nil, err
	}

	return {{$sModelName}}List , paginate, nil
}

{{end}}
