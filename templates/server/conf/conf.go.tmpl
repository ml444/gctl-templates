package conf

import (
	"errors"
	"path/filepath"
	"runtime"

	gkitconfig "github.com/ml444/gkit/config"
	"github.com/ml444/gkit/config/yaml"
	"github.com/ml444/gkit/log"

	"{{ GoModule . "project" }}/config"
)

type Config struct {
	config.CommonConfig `yaml:",inline"`
}


var globalConfig = Config{}

func GetConfig() *Config {
	return &globalConfig
}

func InitConfig() error {
	curDir, err := os.Getwd()
	if err != nil {
		return err
	}
	cfgPath := filepath.Join(curDir, "conf", "conf.yaml")
	c, err := gkitconfig.InitConfig(
		&globalConfig,
		gkitconfig.WithFileFlag("f"),
		gkitconfig.WithFilePath(cfgPath),
		gkitconfig.WithFileLoader(yaml.NewLoader()),
		//conf.WithEnvKeyPrefix("{{ToUpper .Name}}"),
	)
	if err != nil {
		return err
	}
	if globalConfig.Debug {
		_ = c.Walk(func(k string, v *gkitconfig.Value) error {
			if v.FlagName() != "" {
				log.Infof("conf: %s=%v\n", v.FlagName(), v.Value())
			} else if v.EnvName() != "" {
				log.Infof("conf: %s=%v\n", v.EnvName(), v.Value())
			} else if v.FieldName() != "" {
				log.Infof("conf: %s=%v\n", v.FieldName(), v.Value())
			}
			return nil
		})
	}
	return err
}

