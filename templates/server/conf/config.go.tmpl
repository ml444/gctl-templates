package conf

import (
	gkitconfig "github.com/ml444/gkit/config"
	"github.com/ml444/gkit/config/yaml"
	"github.com/ml444/gkit/log"

	"marko/config"
)

type Config struct {
	config.CommonConfig
}


var globalConfig = Config{}

func GetConfig() *Config {
	return &globalConfig
}

func InitConfig() error {
	c, err := gkitconfig.InitConfig(
		&globalConfig,
		gkitconfig.WithFilePath("conf/conf.yaml"),
		gkitconfig.WithFileLoader(yaml.NewLoader()),
		//conf.WithEnvKeyPrefix("GKIT"),
	)
	if globalConfig.Debug {
		_ = c.Walk(func(k string, v *gkitconfig.Value) error {
			if v.FlagName() != "" {
				log.Infof("conf: %s=%v", v.EnvName(), v.Value())
			} else if v.EnvName() != "" {
				log.Infof("conf: %s=%v", v.FlagName(), v.Value())
			} else if v.FieldName() != "" {
				log.Infof("conf: %s=%v", v.FieldName(), v.Value())
			}
			return nil
		})
	}
	return err
}

