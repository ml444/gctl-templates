package config

import (
	"github.com/ml444/gkit/config"
	"github.com/ml444/gkit/config/yaml"
	"github.com/ml444/gkit/log"
)

type Config struct {
	Debug    bool      `yaml:"debug" env:"name=DEBUG" flag:"name=debug;default=true;usage=provide additional information or enable certain debugging"`
	PProfCfg *PProfCfg `yaml:"pprof_cfg"`
	HTTPCfg  *HTTPCfg  `yaml:"http_cfg"`
	GrpcCfg  *GrpcCfg  `yaml:"grpc_cfg"`
	DBCfg    *DBCfg    `yaml:"db_cfg"`
}


var globalConfig *Config

func GetConfig() *Config {
	return globalConfig
}

func InitConfig() error {
	c, err := config.InitConfig(
		globalConfig,
		config.WithFilePath("config/config.yaml"),
		config.WithFileLoader(yaml.NewLoader()),
		//config.WithEnvKeyPrefix("GKIT"),
	)
	if globalConfig.Debug {
		_ = c.Walk(func(k string, v *config.Value) error {
			if v.FlagName() != "" {
				log.Infof("config: %s=%v", v.EnvName(), v.Value())
			} else if v.EnvName() != "" {
				log.Infof("config: %s=%v", v.FlagName(), v.Value())
			} else if v.FieldName() != "" {
				log.Infof("config: %s=%v", v.FieldName(), v.Value())
			}
			return nil
		})
	}
	return err
}

