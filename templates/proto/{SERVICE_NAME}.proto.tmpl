syntax = "proto3";

package {{ .PackageName }};

option go_package = "{{ .GoPackage }}";

import "v/v.proto";
import "err/err.proto";
import "orm/orm.proto";
import "dbx/pagination/pagination.proto";
import "google/api/annotations.proto";

{{ $caseServiceName := ToCamelCase .PackageName }}
service {{ .PackageName }} {
	rpc Create{{$caseServiceName}} (Create{{$caseServiceName}}Req) returns (Create{{$caseServiceName}}Rsp){
	    option (google.api.http) = {
	        post: "/{{ .PackageName }}"
	        body: "*"
	    };
	};
	rpc Update{{$caseServiceName}} (Update{{$caseServiceName}}Req) returns (Update{{$caseServiceName}}Rsp){
	    option (google.api.http) = {
            put: "/{{ .PackageName }}"
            body: "*"
        };
	};
	rpc Delete{{$caseServiceName}} (Delete{{$caseServiceName}}Req) returns (Delete{{$caseServiceName}}Rsp){
	    option (google.api.http) = {
            delete: "/{{ .PackageName }}/{id}"
        };
	};
	rpc Get{{$caseServiceName}} (Get{{$caseServiceName}}Req) returns (Get{{$caseServiceName}}Rsp){
	    option (google.api.http) = {
            get: "/{{ .PackageName }}/{id}"
        };
	};
	rpc List{{$caseServiceName}} (List{{$caseServiceName}}Req) returns (List{{$caseServiceName}}Rsp){
	     option (google.api.http) = {
            get: "/{{ .PackageName }}"
        };
	};
}

// range of error codes: [{{.StartErrCode}}, {{.EndErrCode}}]
enum ErrCode {
	option (err.lower_bound) = {{.StartErrCode}};
	option (err.upper_bound) = {{.EndErrCode}};

    Success = 0;
    ErrInvalidParam = {{    .StartErrCode   }} [(err.detail)={status:400, message:"非法参数", polyglot: ["zh=非法参数", "en=Invalid parameters"]}];
    ErrParamRequired = {{Add .StartErrCode 1}} [(err.detail)={status:400, message:"缺失参数", polyglot: ["zh=缺失参数", "en=Missing parameters"]}];
    ErrNotFound{{$caseServiceName}} = {{Add .StartErrCode 2}} [(err.detail)={status:404, message:"未找到相关记录", polyglot: ["zh=未找到相关记录", "en=Record not found"]}];
}


message Model{{$caseServiceName}} {
    option (orm.enable) = true;
    option (orm.table_name) = "{{ .PackageName }}";

    uint32 created_at = 101 [(orm.tags) = {comment: "创建时间"}];
    uint32 updated_at = 102 [(orm.tags) = {comment: "更新时间"}];
    uint32 deleted_at = 103 [(orm.tags) = {comment: "删除时间"}];
    uint64 id = 1           [(orm.tags) = {comment: "主键", primary_key: true}];
    // string name = 2      [(orm.tags) = {comment: "名称", type: "varchar(255)", index: ["idx_name,class:FULLTEXT", "idx_age_name,priority:2"]}];
    // uint32 age = 3       [(orm.tags) = {comment: "年龄", type: "int", index: ["idx_age_name,priority:1"]}];
    // string phone = 4     [(orm.tags) = {comment: "手机", type: "varchar(25)", unique_index: "uidx_phone", not_null: true}];
}

message Create{{$caseServiceName}}Req {
    Model{{$caseServiceName}} data = 1 [(v.rules).message.required = true];
}
message Create{{$caseServiceName}}Rsp {
    Model{{$caseServiceName}} data = 1;
}

message Update{{$caseServiceName}}Req {
    uint64 id = 1 [(v.rules).uint64.gt = 0];
    Model{{$caseServiceName}} data = 2 [(v.rules).message.required = true];
}
message Update{{$caseServiceName}}Rsp {
    Model{{$caseServiceName}} data = 1;
}

message Delete{{$caseServiceName}}Req {
    uint64 id = 1 [(v.rules).uint64.gte = 1];
    // repeated uint64 id_list = 2 [(v.rules).repeated.min_items = 1];
}
message Delete{{$caseServiceName}}Rsp {}

message Get{{$caseServiceName}}Req {
    uint64 id = 1 [(v.rules).uint64.gt = 0];
}
message Get{{$caseServiceName}}Rsp {
    Model{{$caseServiceName}} data = 1;
}

message List{{$caseServiceName}}Req {
    repeated uint64 id_list = 1;
    optional string name = 2;
    pagination.Pagination paginate = 3;
}
message List{{$caseServiceName}}Rsp {
    pagination.Pagination paginate = 1;
    repeated Model{{$caseServiceName}} list = 2;
}


